/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package br.com.ufcg.demo;

import br.com.ufcg.demo.model.ProfessorDTO;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-07-13T09:51:29.574502700-03:00[America/Sao_Paulo]")
@Validated
@Api(value = "professor", description = "the professor API")
public interface ProfessorApi {

    default ProfessorApiDelegate getDelegate() {
        return new ProfessorApiDelegate() {};
    }

    /**
     * DELETE /professor/ : Get Professor By Id
     * Get professor info by id
     *
     * @param id  (required)
     * @return It&#39;s Ok (status code 200)
     *         or Professor Not Found (status code 404)
     */
    @ApiOperation(value = "Get Professor By Id", nickname = "deleteProfessorById", notes = "Get professor info by id", response = Object.class, authorizations = {
        
        @Authorization(value = "Authorization")
         }, tags={ "professor-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "It's Ok", response = Object.class),
        @ApiResponse(code = 404, message = "Professor Not Found", response = Object.class) })
    @DeleteMapping(
        value = "/professor/",
        produces = { "*/*" }
    )
    default ResponseEntity<Object> deleteProfessorById(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "id", required = true) Long id) {
        return getDelegate().deleteProfessorById(id);
    }


    /**
     * GET /professor/ : List All Professors
     * List all professors from the system
     *
     * @return Request OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Forbidden (status code 403)
     * Documentation
     * @see <a href="www.ufcg.com">List All Professors Documentation</a>
     */
    @ApiOperation(value = "List All Professors", nickname = "getAllProfessors", notes = "List all professors from the system", response = ProfessorDTO.class, responseContainer = "List", authorizations = {
        
        @Authorization(value = "Authorization")
         }, tags={ "professor-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Request OK", response = ProfessorDTO.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProfessorDTO.class, responseContainer = "List"),
        @ApiResponse(code = 403, message = "Forbidden", response = ProfessorDTO.class, responseContainer = "List") })
    @GetMapping(
        value = "/professor/",
        produces = { "*/*" }
    )
    default ResponseEntity<List<ProfessorDTO>> getAllProfessors() {
        return getDelegate().getAllProfessors();
    }


    /**
     * GET /professor/{id}
     * description for professor operations
     *
     * @param id  (required)
     * @return OK (status code 200)
     */
    @ApiOperation(value = "", nickname = "getProfessorById", notes = "description for professor operations", response = Object.class, authorizations = {
        
        @Authorization(value = "Authorization")
         }, tags={ "professor-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Object.class) })
    @GetMapping(
        value = "/professor/{id}",
        produces = { "*/*" }
    )
    default ResponseEntity<Object> getProfessorById(@ApiParam(value = "",required=true) @PathVariable("id") Long id) {
        return getDelegate().getProfessorById(id);
    }


    /**
     * PUT /professor/ : Update Professor By Id
     * Update professor info by id
     *
     * @param id  (required)
     * @param professorDTO  (required)
     * @return It&#39;s Ok (status code 200)
     *         or Professor Not Found (status code 404)
     */
    @ApiOperation(value = "Update Professor By Id", nickname = "updateProfessorById", notes = "Update professor info by id", response = Object.class, authorizations = {
        
        @Authorization(value = "Authorization")
         }, tags={ "professor-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "It's Ok", response = Object.class),
        @ApiResponse(code = 404, message = "Professor Not Found", response = Object.class) })
    @PutMapping(
        value = "/professor/",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Object> updateProfessorById(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "id", required = true) Long id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody ProfessorDTO professorDTO) {
        return getDelegate().updateProfessorById(id, professorDTO);
    }

}
