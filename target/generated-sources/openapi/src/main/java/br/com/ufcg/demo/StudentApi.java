/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package br.com.ufcg.demo;

import br.com.ufcg.demo.model.StudentDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-07-20T09:56:59.482560800-03:00[America/Sao_Paulo]")
@Validated
@Tag(name = "student", description = "the student API")
public interface StudentApi {

    default StudentApiDelegate getDelegate() {
        return new StudentApiDelegate() {};
    }

    /**
     * DELETE /student/ : Delete Student By Id
     * Delete a Student from the system
     *
     * @param id  (required)
     * @return It&#39;s Ok (status code 200)
     *         or Student Not Found (status code 404)
     *         or Bad Request (status code 400)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "deleteStudentById",
        summary = "Delete Student By Id",
        tags = { "student-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "It's Ok", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "404", description = "Student Not Found", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            })
        },
        security = {
            @SecurityRequirement(name = "Authorization")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/student/",
        produces = { "*/*" }
    )
    default ResponseEntity<Object> deleteStudentById(
        @NotNull @Parameter(name = "id", description = "", required = true) @Valid @RequestParam(value = "id", required = true) Long id
    ) {
        return getDelegate().deleteStudentById(id);
    }


    /**
     * GET /student/ : Get All Students
     * Student List
     *
     * @return It&#39;s Ok (status code 200)
     *         or Bad Request (status code 400)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getAllStudents",
        summary = "Get All Students",
        tags = { "student-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "It's Ok", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = StudentDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = StudentDTO.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = StudentDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "Authorization")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/student/",
        produces = { "*/*" }
    )
    default ResponseEntity<List<StudentDTO>> getAllStudents(
        
    ) {
        return getDelegate().getAllStudents();
    }


    /**
     * GET /student/{id} : Get Student By Id
     * Student Info
     *
     * @param id  (required)
     * @return It&#39;s Ok (status code 200)
     *         or Student Not Found (status code 404)
     *         or Bad Request (status code 400)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "getStudentById",
        summary = "Get Student By Id",
        tags = { "student-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "It's Ok", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "404", description = "Student Not Found", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            })
        },
        security = {
            @SecurityRequirement(name = "Authorization")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/student/{id}",
        produces = { "*/*" }
    )
    default ResponseEntity<Object> getStudentById(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") Long id
    ) {
        return getDelegate().getStudentById(id);
    }


    /**
     * PUT /student/ : Update Student By Id
     * Update a Student from the system
     *
     * @param id  (required)
     * @param studentDTO  (required)
     * @return It&#39;s Ok (status code 200)
     *         or Student Not Found (status code 404)
     *         or Bad Request (status code 400)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "updateStudentById",
        summary = "Update Student By Id",
        tags = { "student-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "It's Ok", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "404", description = "Student Not Found", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            })
        },
        security = {
            @SecurityRequirement(name = "Authorization")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/student/",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Object> updateStudentById(
        @NotNull @Parameter(name = "id", description = "", required = true) @Valid @RequestParam(value = "id", required = true) Long id,
        @Parameter(name = "StudentDTO", description = "", required = true) @Valid @RequestBody StudentDTO studentDTO
    ) {
        return getDelegate().updateStudentById(id, studentDTO);
    }

}
