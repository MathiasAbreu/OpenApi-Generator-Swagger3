/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package br.com.ufcg.demo;

import br.com.ufcg.demo.model.StudentDTO;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-07-13T09:51:29.574502700-03:00[America/Sao_Paulo]")
@Validated
@Api(value = "student", description = "the student API")
public interface StudentApi {

    default StudentApiDelegate getDelegate() {
        return new StudentApiDelegate() {};
    }

    /**
     * DELETE /student/ : Delete Student By Id
     * Delete a Student from the system
     *
     * @param id  (required)
     * @return It&#39;s Ok (status code 200)
     *         or Student Not Found (status code 404)
     *         or Bad Request (status code 400)
     *         or Forbidden (status code 403)
     */
    @ApiOperation(value = "Delete Student By Id", nickname = "deleteStudentById", notes = "Delete a Student from the system", response = Object.class, authorizations = {
        
        @Authorization(value = "Authorization")
         }, tags={ "student-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "It's Ok", response = Object.class),
        @ApiResponse(code = 404, message = "Student Not Found", response = Object.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Object.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Object.class) })
    @DeleteMapping(
        value = "/student/",
        produces = { "*/*" }
    )
    default ResponseEntity<Object> deleteStudentById(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "id", required = true) Long id) {
        return getDelegate().deleteStudentById(id);
    }


    /**
     * GET /student/ : Get All Students
     * Student List
     *
     * @return It&#39;s Ok (status code 200)
     *         or Bad Request (status code 400)
     *         or Forbidden (status code 403)
     */
    @ApiOperation(value = "Get All Students", nickname = "getAllStudents", notes = "Student List", response = StudentDTO.class, responseContainer = "List", authorizations = {
        
        @Authorization(value = "Authorization")
         }, tags={ "student-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "It's Ok", response = StudentDTO.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = StudentDTO.class, responseContainer = "List"),
        @ApiResponse(code = 403, message = "Forbidden", response = StudentDTO.class, responseContainer = "List") })
    @GetMapping(
        value = "/student/",
        produces = { "*/*" }
    )
    default ResponseEntity<List<StudentDTO>> getAllStudents() {
        return getDelegate().getAllStudents();
    }


    /**
     * GET /student/{id} : Get Student By Id
     * Student Info
     *
     * @param id  (required)
     * @return It&#39;s Ok (status code 200)
     *         or Student Not Found (status code 404)
     *         or Bad Request (status code 400)
     *         or Forbidden (status code 403)
     */
    @ApiOperation(value = "Get Student By Id", nickname = "getStudentById", notes = "Student Info", response = Object.class, authorizations = {
        
        @Authorization(value = "Authorization")
         }, tags={ "student-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "It's Ok", response = Object.class),
        @ApiResponse(code = 404, message = "Student Not Found", response = Object.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Object.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Object.class) })
    @GetMapping(
        value = "/student/{id}",
        produces = { "*/*" }
    )
    default ResponseEntity<Object> getStudentById(@ApiParam(value = "",required=true) @PathVariable("id") Long id) {
        return getDelegate().getStudentById(id);
    }


    /**
     * PUT /student/ : Update Student By Id
     * Update a Student from the system
     *
     * @param id  (required)
     * @param studentDTO  (required)
     * @return It&#39;s Ok (status code 200)
     *         or Student Not Found (status code 404)
     *         or Bad Request (status code 400)
     *         or Forbidden (status code 403)
     */
    @ApiOperation(value = "Update Student By Id", nickname = "updateStudentById", notes = "Update a Student from the system", response = Object.class, authorizations = {
        
        @Authorization(value = "Authorization")
         }, tags={ "student-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "It's Ok", response = Object.class),
        @ApiResponse(code = 404, message = "Student Not Found", response = Object.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Object.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Object.class) })
    @PutMapping(
        value = "/student/",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Object> updateStudentById(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "id", required = true) Long id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody StudentDTO studentDTO) {
        return getDelegate().updateStudentById(id, studentDTO);
    }

}
